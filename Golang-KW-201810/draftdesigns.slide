Go 2 Draft Designs

KW Go Developers Meetup
October 9, 2018

Daniel Lockhart
Danny Roes
Cameron Smith
Dejero

* Generics

Ability to parameterize types and functions based on other types

A long requested feature that has been investigated and had designs proposed since Go's first Open Source release

After experiencing generics in C++ and Java, the designers decided to take the time to understand the topic well enough and design a good solution

* Example

From last year's talk on pipelines we had a function that merged channels:

    func Merge(chans ...<-chan Message) <-chan Message

This function needs to be rewritten each time you introduce a new message type

Better:

    func Merge(chans ...<-chan T) <-chan T

where T can be any compatible type

* Other examples

    // Keys returns the keys from a map.
    func Keys(m map[K]V) []K

    // SortSlice sorts a slice of data using the given comparison function.
    func SortSlice(data []T, less func(x, y T) bool)

* Use cases

Containers

Generic algorithms

Utility functions on slices, channels, maps

* What about interfaces?

Another approach for reusable code

Used with generic containers in the current standard library

Not type safe at compile time - all type checking happens at runtime via type assertions

Require repetitive work by the programmer

Russ Cox: "do you want slow programmers, slow compilers and bloated binaries, or slow execution times?"

* Goals

Enable the above use cases

Require explicit constraints on type parameters so that we have a clear, enforced agreement between the caller and implementation

Must be implementable at compile time by repeated specialized compilation (like C++) or at runtime so that the the decision on the strategy can be left to the compiler, same as any other optimization

Must fit into the Go language while keeping it straightforward and understandable

* Syntax

The new syntax for generics introduces a type parameter list in a type or function declaration of the form (type <list of type names>). For example:

    type List(type T) []T

    func Keys(type K, V)(m map[K]V) []K

Types are supplied using the ordinary call syntax:

    var ints List(int)

    keys := Keys(int, string)(map[int]string{1:"one", 2: "two"})

Types may also be inferred in many cases, such as the above

Instances of generic functions become regular functions:

    f := Keys(int, string) // type func(map[int]string) []int
    keys := f(map[int]string{1:"one", 2: "two"})

* Contracts

Contracts explicitly define the operations that the type(s) must support

They have two purposes:

- Validate the arguments supplied by the caller when a function (or type) with type parameters is instantiated

- Validate what the function using the type parameters is allowed to do with them

If a contract is not specified, only the operations supported by _any_ type are permitted

* Benefits of contracts

Allow caller and implementation to be far away from each other

Implementation might be compiled into a package and instantiated later

Explicit contracts avoid accidental changes when implementation is changed

* Another benefit

Contracts also enable the compiler to generate more helpful error messages

In C++ the caller's types are checked against the implementation only by compiling the implementation
- Errors tend to be long and complex as the error might be buried in layers of generic function calls
- Errors also refer to implementation code that might be unfamiliar to the programmer

Also, in C++ the implementation may call any method on a variable of a generic type, e.g. `v.String()`
- The name is not resolved until the function is instantiated
- This doesn't work for Go because Go resolves all names at the point they are seen

* Contract syntax

    contract Equal(t T) {
        t == t
    }

It is essentially a function definition with a `contract` keyword and the body listing the set of possible operations and method calls

In the type or function definition the contract name follows the type parameters

    type Set(type T Equal) []T

* Calling a method in a contract

    contract stringer(x T) {
        var s string = x.String()
    }

Contract requires that x has a method `String()` that returns a string

    func Stringify(type T stringer)(s []T) (ret []string) {
        for _, v := range s {
            ret = append(ret, v.String())
        }
        return ret
    }

* Passing explicit types to a contract

    contract convertible(_ To, f From) {
        To(f)
    }

In the above contract, f must be convertible to type `To`

    func FormatUnsigned(type T convertible(uint64, T))(v T) string {
        return strconv.FormatUint(uint64(v), 10)
    }

* One contract per type or function

Functions and types may have multiple type parameters, but they may only specify one contract

    func Keys(type K, V Equal(K))(m map[K]V) []K

Note that contracts don't need to use all of the type parameters as shown above

Contracts may also be nested

    contract PrintStringer(x T) {
        stringer(x)
        x.Print()
    }

* Values of type parameters are not boxed

With interfaces, non-pointer values are _boxed_ when assigned to an interface variable

This means that the value is stored on the stack or heap and a pointer to the value is assigned to the variable

Parameterized types based on non-pointer value may be converted directly to their non-pointer types

    package pair

    type Pair(type firstT, secondT) struct {
        f1 firstT
        f2 secondT
    }

pair.Pair(int, string) is convertible to struct { f1 int; f2 string }

* Reflection

When a parameterized function or type is instantiated it becomes a regular function or type

It can then be inspected by reflection in the ordinary way

Because it's not possible for non-generic code to reference generic code without instantiating it, no extension to the reflection API is required

* No types in method declarations

    type Set(type T) ...

    func (s Set(T)) Insert(type U)(value U) ... // not allowed

This would require a very large number of Insert methods to be available at runtime, for all possible U types

Required to determine if Set satisfies a particular interface or to allow reflection on Set's methods

\...alternative is to give up on implementing generics at compile time

* No type specialization

Not possible to 'optimize' for particular types by providing special implementations

Type assertions and type switches are possible on type parameters, though

    func ReadByte(type T byteReader)(r T) (byte, error) {
        if br, ok := r.(io.ByteReader); ok {
            return br.ReadByte()
        }
        var b [1]byte
        _, err := r.Read(b[:])
        return b[0], err
    }

* Other limitations / non-goals

No metaprogramming or higher level abstractions

No operator overloading on generic containers (including range)

No covariance or contravariance

No parameterization on non-type values

No adaptors for types that do not directly fulfill a contract

No currying (specifying only some parameters)

* Similarity to Java

Java uses interfaces to specify type constraints

    interface Equals<T> {
        boolean equals(T o);
    }

    class Set<T implements Equals<T>> {
        ...
        public void add(T o) {
            ...
        }
    }

    Set<int> set;
    set.add(1);

* Type erasure

Early versions of Java supported non-typed containers (based on Object)

With generics, type parameterization for the legacy containers is now available but the compiler still converts back to the original untyped versions with extra runtime type checking

It has the disadvantage that value types like boolean and int must be boxed (converted to Boolean and Integer)

Also, dynamic type checking is not possible

* Similarity to C++

C++ implements generics (called "templates" in C++) entirely at compile time

As of C++17 it does not yet have type constraints; however, this has been proposed for C++20 (called "concepts")

Without constraints, error messages can be very complicated

* Feedback

Why use contracts and not interfaces like Java to avoid adding a new construct that is similar to an existing one?
- Interfaces have no way of specifying operators

Introduce a standard library package of special interfaces or functions representing the operators?

Special syntax for specifying operators in interfaces?
- This has the drawback that you could only use this syntax in type constraint interfaces, not regular interfaces

Introduce a built-in library of contracts covering commonly use groups of types (numeric, comparable, orderable, etc.) to make code more readable

Why use () and not <> for surrounding type parameters?
- Keeps the grammar simple, avoids a symbol table during parsing

* Error handling

Most languages consider this a solved problem. For example, Java.

    public bool doSomethingStupid() throws MyExpectedException {
        if (0 == 0) { throw new MyExpectedException("herpaderp"); }
        return false;
    }
    public String doItCarelessly() {
        if (doSomethingStupid()) { return "Somehow this worked." }
    }
    public String doItCarefully() {
        try { return doItCarelessly(); }
        catch (MyExpectedException e) { e.printStackTrace(); }
        finally { doAllTheCleanup(); }
    }

Exception based error handling should look familiar. This can also be called implicit error handling. The error is implicit because you can ignore the error, and your code looks the exact same as if the function never threw an Exception at all. 

* Implicit error handling

Pros
    - Familiar to most developers 
    - Much cleaner code in the common cases of ignoring the error or bubbling up the error.
    - Try and catch keywords are more visible when they are used infrequently.


Cons
    - Exceptions are expensive. This can be a performance problem if a function throws errors repeatedly in a tight loop.
    - Easy to miss. If you are modifying code that ignores an error, you may not think the function throws an error at all.

* Explicit error handling

However some newer languages (Rust,Go,Swift) have decided the cons of implicit error handling to be too much and decided to revamp the system. Discriminated unions, reinvented syntax or simple if else statements seem to be preferable.
    
    //Go
    func OpenFile(src string) *File, error {
        r, err := os.Open(src)
        if err != nil {
            return err
        }
    }

    //Rust
    fn open_file(src: string) Result<File,Error> {
        return Ok(File::open(src)?);
    }
    
* Explicit error handling

Pros
    - Easy to see therefore less surprises when modifying a function.
    - Faster because there is not a need to unwind the stack each time, although this can be done in special cases(pkg/errors, panic/recover, Rust's unwrapping)


Cons
    - Verbose in Go's case
    - Unfamiliar in Rust's case

* Why change?

A problem frequently brought up in Go's current error handling is that the verbosity can obscure real errors. Here's an example from the draft.

    func CopyFile(src, dst string) error {
        r, err := os.Open(src)
        if err != nil {
            return err
        }
        defer r.Close()
        w, err := os.Create(dst)
        if err != nil {
            return err
        }
        defer w.Close()
        if _, err := io.Copy(w, r); err != nil {
            return err
        }
        if err := w.Close(); err != nil {
            return err
        }
    }
Can you spot the issues?

* Answer

The answer was that is io.Copy or w.Close failed, the partially written file would not be removed.
Reducing the if err != nil noise is the central reason of the check/handle proposal.

* Check/Handle
The new code would look like this.

    func CopyFile(src, dst string) error {
        handle err {
            return fmt.Errorf("copy %s %s: %v", src, dst, err)
        }

        r := check os.Open(src)
        defer r.Close()

        w := check os.Create(dst)
        handle err {
            w.Close()
            os.Remove(dst) // (only if a check fails)
        }

        check io.Copy(w, r)
        check w.Close()
        return nil
    }

* Check keyword
The check keyword essentially removes the last return value of a function if that function returns an error.
It then checks if the err == nil, and if so executes the handle function above it.

The Go 2 Draft explains it best

Given a function fn where...

    fn() -> v1, v2, ..., vN, err
    v1, ..., vN := check <expr>

it will expand to:

    v1, ..., vN, err := fn()
    if err != nil {
        err = handler(err)
        return err
    }

* Handle keyword

The handle keyword is like defer in reverse. You can have multiple handle blocks inside of a function and they will execute according to the check that triggered them.
Each handle will pass control to the previous handle until it encounters a handle block that contains a return statement.
Check/Handle statements also only care about handle blocks that exist inside their current scope, for example.

    func process(user string, files chan string) (n int, err error) {
        handle err { return 0, fmt.Errorf("process: %v", err)  }      // handler A
        for i := 0; i < 3; i++ {
            handle err { err = fmt.Errorf("attempt %d: %v", i, err) } // handler B
            handle err { err = moreWrapping(err) }                    // handler C

            check do(something())  // check 1: handler chain C, B, A
        }
        check do(somethingElse())  // check 2: handler chain A
    }

* Default handler
From the Go 2 draft:
All functions whose last result is of type error begin with an implicit default handler. The default handler assigns the error argument to the last result and then returns, using the other results unchanged.
    
    //Go 1
    func OpenFile(src string) *File, error {
        r, err := os.Open(src)
        if err != nil {
            return err
        }
    }
    //Rust
    fn open_file(src: string) Result<File,Error> {
        return Ok(File::open(src)?);
    }
    //Go 2 with default handler
    func OpenFile(src string) *File, error {
        r := check os.Open(src)
        return r
    }

* Considerations
The handler chaining seems like it could get complicated in bigger functions with multiple scopes. A common pitfall pointed out with exceptions is that you no longer can read the code easily top-down, you must jump around to various expection handlers. You can only jump around in a single function's scope which limits this common issue, but I wonder if handler chaining is necessary at all? 
While I am personally a fan of reducing the if err != nil noise prevalent in Go, currently handle statements are missing a built in way to handle different types of errors.

    try {}
    catch (SpecificException e1) {}
    catch (Exception everything) {}

This may be because the current error value system is also lacking consensus on the matter. Luckily...

* Error values

* Error values

- Go doesn't have a standardized way to report or detect errors
- In order to create scalable programs, errors need to be handled in a programatic fashion
- Errors can't be output in a standardized format since each package is free to nest their errors in whatever format they prefer

* Current functionality

Errors are any type implementing the `error` interface. Currently, to detect and handle an error there are a few options:

- Compare to a known error object
- Use a type assertion or switch to determine the actual type
- Do a substring search within the error string

* Examples
    ReadError := errors.New("couldn't read")

    type WriteError struct {
        Err error
        Path string
    }
    ...
    if err == ReadError {
        log.Println("Unable to read value")
    }
    ...
    if writeErr, ok := err.(WriteError); ok {
        log.Printf("Unable to write value to %s\n", writeErr.Path)
    }
    ...
    if strings.Contains(err, "access denied") {
        log.Print("Unable to access item")
    }


* Issues

While a substring search is slow and potentially fragile, it's the only method that currently works if you have nested errors.

Additionally, reporting/displaying errors relies on error strings being formatted in a logical fashion, or lots of work to format them.

* Goals

- Make error inspection easier and more robust
- Allowing printing errors in a standard form, with additional levels of detail

Also:

- The solution must be compatible with existing code that is checking error equality or error types
- Errors should be translatable using `golang.org/x/text/message`
- Packages need to be able to define their own error types
- Error generation must be efficient, and have a fixed cost

* Draft
Two drafts have been proposed: one to address error inspection and one to address error formatting.

* Error Inspection Proposal

- Errors can implement an optional Wrapper interface containing an Unwrap method to return the next error in the chain
- The `errors` package includes two new functions:
    // Is reports whether err or any of the errors in its chain is equal to target.
    func Is(err, target error) bool

    // As checks whether err or any of the errors in its chain is a value of type E.
    // If so, it returns the discovered value of type E, with ok set to true.
    // If not, it returns the zero value of type E, with ok set to false.
    func As(type E)(err error) (e E, ok bool)

(Note the As() function uses a contract)

* Examples
    //Formerly if err == ReadError
    if errors.Is(err, ReadError) {
        log.Println("Unable to read value")
    }

    ...

    //Formerly if writeErr, ok := err.(WriteError); ok
    if writeErr, ok := errors.As(WriteError)(err); ok {
        log.Printf("Unable to write value to %s\n", writeErr.Path)
    }

* Error Formatting Proposal

- Errors can implement an optional interface to format error output:
    type Formatter interface {
        Format(p Printer) (next error)
    }

The `Printer` argument is provided by the package outputting the error, oftem `fmt`, and will contain `Print` and `Printf` functions to output the data. The printer also contains a  `Detail` function to determine if whether or not extra information should be printed.

* Error format
Previously:

    foo: bar(nameserver 139): baz flopped
 
Proposed:

    foo:
        file.go:123 main.main+0x123
    --- bar(nameserver 139):
        some detail only text
        file.go:456
    --- baz flopped:
        file.go:789

This draft also proposes that using the `%+v` verb in `printf` would output errors in the detailed multiline format.

* Further reading

.link https://blog.golang.org/go2draft Go 2 draft designs
